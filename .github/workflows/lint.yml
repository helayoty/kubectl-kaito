name: Lint

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  GO_VERSION: "1.24"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint-setup:
    name: Lint Setup
    runs-on: ubuntu-latest
    outputs:
      go-cache-key: ${{ steps.cache-keys.outputs.go-cache-key }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate cache keys
        id: cache-keys
        run: |
          echo "go-cache-key=${{ runner.os }}-go-${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum') }}" >> $GITHUB_OUTPUT

  golangci-lint:
    name: golangci-lint
    runs-on: ubuntu-latest
    needs: lint-setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ needs.lint-setup.outputs.go-cache-key }}
          restore-keys: |
            ${{ runner.os }}-go-${{ env.GO_VERSION }}-

      - name: Download dependencies
        run: go mod download

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v4
        with:
          version: v1.55.2
          args: --timeout=10m --config=.golangci.yaml
          skip-cache: false
          skip-pkg-cache: false
          skip-build-cache: false

  format-and-style:
    name: Format and Style Checks
    runs-on: ubuntu-latest
    needs: lint-setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ needs.lint-setup.outputs.go-cache-key }}
          restore-keys: |
            ${{ runner.os }}-go-${{ env.GO_VERSION }}-

      - name: Download dependencies
        run: go mod download

      - name: Check gofmt
        run: |
          echo "Checking Go formatting..."
          unformatted=$(gofmt -l .)
          if [ -n "$unformatted" ]; then
            echo "❌ The following files are not formatted:"
            echo "$unformatted"
            echo ""
            echo "Please run 'gofmt -w .' or 'make fmt' to fix formatting"
            exit 1
          fi
          echo "✅ All files are properly formatted"

      - name: Check goimports
        run: |
          echo "Checking Go imports..."
          if ! command -v goimports &> /dev/null; then
            go install golang.org/x/tools/cmd/goimports@latest
          fi
          
          unformatted=$(goimports -l .)
          if [ -n "$unformatted" ]; then
            echo "❌ The following files have incorrect imports:"
            echo "$unformatted"
            echo ""
            echo "Please run 'goimports -w .' to fix imports"
            exit 1
          fi
          echo "✅ All imports are properly formatted"

      - name: Run go vet
        run: |
          echo "Running go vet..."
          go vet ./...
          echo "✅ go vet passed"

      - name: Check go mod tidy
        run: |
          echo "Checking go mod tidy..."
          go mod tidy
          if ! git diff --quiet go.mod go.sum; then
            echo "❌ go.mod or go.sum is not tidy"
            echo "Please run 'go mod tidy' or 'make tidy'"
            echo ""
            echo "Diff:"
            git diff go.mod go.sum
            exit 1
          fi
          echo "✅ go.mod and go.sum are tidy"

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: lint-setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ needs.lint-setup.outputs.go-cache-key }}
          restore-keys: |
            ${{ runner.os }}-go-${{ env.GO_VERSION }}-

      - name: Download dependencies
        run: go mod download

      - name: Run gosec Security Scanner
        uses: securecodewarrior/github-action-gosec@master
        with:
          args: '-no-fail -fmt sarif -out gosec.sarif ./...'

      - name: Upload SARIF file
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: gosec.sarif

  license-check:
    name: License Header Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check license headers
        run: |
          echo "Checking license headers..."
          
          # Make the script executable
          chmod +x ./hack/add-license-header.sh
          
          # Check if all Go files have license headers
          find . -name "*.go" -not -path "./vendor/*" | xargs ./hack/add-license-header.sh
          EXIT_CODE=$?
          
          if [ $EXIT_CODE -eq 0 ]; then
            echo "✅ All files have proper license headers"
          else
            echo "❌ Some files were missing license headers (now fixed)"
            echo "Please commit the changes and re-run the workflow"
            exit 1
          fi

  additional-checks:
    name: Additional Checks
    runs-on: ubuntu-latest
    needs: lint-setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ needs.lint-setup.outputs.go-cache-key }}
          restore-keys: |
            ${{ runner.os }}-go-${{ env.GO_VERSION }}-

      - name: Download dependencies
        run: go mod download

      - name: Check for ineffective assignments
        run: |
          echo "Checking for ineffective assignments..."
          go install github.com/gordonklaus/ineffassign@latest
          ineffassign ./...
          echo "✅ No ineffective assignments found"

      - name: Check for misspellings
        run: |
          echo "Checking for misspellings..."
          go install github.com/client9/misspell/cmd/misspell@latest
          misspell -error .
          echo "✅ No misspellings found"

  lint-summary:
    name: Lint Summary
    runs-on: ubuntu-latest
    needs: [golangci-lint, format-and-style, security-scan, license-check, additional-checks]
    if: always()
    steps:
      - name: Check lint results
        run: |
          echo "=== Lint Results Summary ==="
          echo "golangci-lint: ${{ needs.golangci-lint.result }}"
          echo "format-and-style: ${{ needs.format-and-style.result }}"
          echo "security-scan: ${{ needs.security-scan.result }}"
          echo "license-check: ${{ needs.license-check.result }}"
          echo "additional-checks: ${{ needs.additional-checks.result }}"
          
          # Check if any critical lints failed
          if [[ "${{ needs.golangci-lint.result }}" != "success" || \
                "${{ needs.format-and-style.result }}" != "success" || \
                "${{ needs.license-check.result }}" != "success" || \
                "${{ needs.additional-checks.result }}" != "success" ]]; then
            echo "❌ Critical lint checks failed"
            exit 1
          fi
          
          # Security scan is warning only
          if [[ "${{ needs.security-scan.result }}" != "success" ]]; then
            echo "⚠️ Security scan found issues (not blocking)"
          fi
          
          echo "✅ All required lint checks passed"
