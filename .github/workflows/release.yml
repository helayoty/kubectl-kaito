name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release (e.g., v1.0.0)'
        required: true
        type: string

env:
  GO_VERSION: "1.24"

jobs:
  prepare-release:
    name: Prepare Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
      upload_url: ${{ steps.create-release.outputs.upload_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version
        id: get-version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.tag }}"
          else
            VERSION=${GITHUB_REF#refs/tags/}
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Version: ${VERSION}"

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Run tests
        run: make unit-tests

      - name: Run license header check
        run: |
          # Check if all Go files have license headers
          find . -name "*.go" -not -path "./vendor/*" | xargs ./hack/add-license-header.sh
          if [ $? -eq 1 ]; then
            echo "✅ All files have license headers"
          else
            echo "❌ Some files are missing license headers"
            exit 1
          fi

      - name: Prepare krew release
        run: |
          ./hack/prepare-krew-release.sh ${{ steps.get-version.outputs.version }}

      - name: Upload krew manifest
        uses: actions/upload-artifact@v3
        with:
          name: krew-manifest
          path: krew/kaito-${{ steps.get-version.outputs.version }}.yaml

      - name: Upload release archives
        uses: actions/upload-artifact@v3
        with:
          name: release-archives
          path: dist/archives/

  goreleaser:
    name: GoReleaser
    runs-on: ubuntu-latest
    needs: prepare-release
    outputs:
      upload_url: ${{ steps.create-release.outputs.upload_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Run GoReleaser
        id: goreleaser
        uses: goreleaser/goreleaser-action@v5
        with:
          distribution: goreleaser
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get release upload URL
        id: create-release
        run: |
          # Get the upload URL from the release created by GoReleaser
          RELEASE_ID=$(gh api repos/${{ github.repository }}/releases/tags/${{ needs.prepare-release.outputs.version }} --jq '.id')
          UPLOAD_URL=$(gh api repos/${{ github.repository }}/releases/${RELEASE_ID} --jq '.upload_url')
          echo "upload_url=${UPLOAD_URL}" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  upload-krew-manifest:
    name: Upload Krew Manifest
    runs-on: ubuntu-latest
    needs: [prepare-release, goreleaser]
    steps:
      - name: Download krew manifest
        uses: actions/download-artifact@v3
        with:
          name: krew-manifest

      - name: Upload krew manifest to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.goreleaser.outputs.upload_url }}
          asset_path: ./kaito-${{ needs.prepare-release.outputs.version }}.yaml
          asset_name: kaito.yaml
          asset_content_type: application/x-yaml

  test-krew-install:
    name: Test Krew Installation
    runs-on: ubuntu-latest
    needs: [prepare-release, goreleaser, upload-krew-manifest]
    steps:
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Install krew
        run: |
          set -x; cd "$(mktemp -d)" &&
          OS="$(uname | tr '[:upper:]' '[:lower:]')" &&
          ARCH="$(uname -m | sed -e 's/x86_64/amd64/' -e 's/\(arm\)\(64\)\?.*/\1\2/' -e 's/aarch64$/arm64/')" &&
          KREW="krew-${OS}_${ARCH}" &&
          curl -fsSLO "https://github.com/kubernetes-sigs/krew/releases/latest/download/${KREW}.tar.gz" &&
          tar zxvf "${KREW}.tar.gz" &&
          ./"${KREW}" install krew

      - name: Add krew to PATH
        run: echo "$HOME/.krew/bin" >> $GITHUB_PATH

      - name: Download krew manifest
        uses: actions/download-artifact@v3
        with:
          name: krew-manifest

      - name: Test krew installation
        run: |
          # Test installation with the generated manifest
          kubectl krew install --manifest=kaito-${{ needs.prepare-release.outputs.version }}.yaml
          
          # Test basic functionality
          kubectl kaito --help
          kubectl kaito models list --help
          kubectl kaito deploy --help
          
          # Test command structure
          kubectl kaito models list || true  # May fail due to network, but should show help
          
          echo "✅ Krew installation test passed"

      - name: Cleanup
        run: |
          kubectl krew uninstall kaito || true

  create-pr-for-krew-index:
    name: Create PR for Krew Index
    runs-on: ubuntu-latest
    needs: [prepare-release, test-krew-install]
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Download krew manifest
        uses: actions/download-artifact@v3
        with:
          name: krew-manifest

      - name: Create PR instructions
        run: |
          cat > pr-instructions.md << EOF
          # Krew Index Submission for kubectl-kaito ${{ needs.prepare-release.outputs.version }}
          
          ## Manual Steps Required
          
          1. **Fork the krew-index repository**:
             \`\`\`bash
             gh repo fork kubernetes-sigs/krew-index
             \`\`\`
          
          2. **Clone your fork**:
             \`\`\`bash
             git clone https://github.com/YOUR_USERNAME/krew-index.git
             cd krew-index
             \`\`\`
          
          3. **Copy the manifest**:
             \`\`\`bash
             cp kaito-${{ needs.prepare-release.outputs.version }}.yaml plugins/kaito.yaml
             \`\`\`
          
          4. **Create a commit and PR**:
             \`\`\`bash
             git add plugins/kaito.yaml
             git commit -m "Add kubectl-kaito plugin ${{ needs.prepare-release.outputs.version }}"
             git push origin main
             gh pr create --title "Add kubectl-kaito plugin ${{ needs.prepare-release.outputs.version }}" --body "Add kubectl-kaito plugin for managing AI/ML workloads with Kaito operator."
             \`\`\`
          
          ## Manifest Content
          The krew manifest has been validated and is ready for submission.
          
          ## Release Information
          - **Version**: ${{ needs.prepare-release.outputs.version }}
          - **Release URL**: https://github.com/kaito-project/kubectl-kaito/releases/tag/${{ needs.prepare-release.outputs.version }}
          - **Repository**: https://github.com/kaito-project/kubectl-kaito
          
          EOF
          
          echo "::notice::Krew index submission instructions created. Check pr-instructions.md in the artifacts."

      - name: Upload PR instructions
        uses: actions/upload-artifact@v3
        with:
          name: krew-pr-instructions
          path: pr-instructions.md
