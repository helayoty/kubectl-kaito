name: E2E Tests

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      test_kind:
        description: "Run Kind e2e tests"
        required: false
        default: "true"
        type: boolean
      test_aks:
        description: "Run AKS e2e tests (billable)"
        required: false
        default: "false"
        type: boolean
      kaito_version:
        description: "Kaito version to test"
        required: false
        default: "0.3.0"
        type: string

env:
  GO_VERSION: "1.24"
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  setup:
    name: Setup Test Matrix
    runs-on: ubuntu-latest
    outputs:
      run-kind: ${{ steps.matrix.outputs.run-kind }}
      run-aks: ${{ steps.matrix.outputs.run-aks }}
      kaito-version: ${{ steps.matrix.outputs.kaito-version }}
    steps:
      - name: Determine test matrix
        id: matrix
        run: |
          # Default values
          RUN_KIND="true"
          RUN_AKS="false"
          KAITO_VERSION="0.3.0"

          # Workflow dispatch inputs
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            RUN_KIND="${{ github.event.inputs.test_kind }}"
            RUN_AKS="${{ github.event.inputs.test_aks }}"
            KAITO_VERSION="${{ github.event.inputs.kaito_version }}"
          fi

          # Only run AKS on main branch pushes by default (unless manually triggered)
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/main" ]]; then
            RUN_AKS="true"
          fi

          echo "run-kind=${RUN_KIND}" >> $GITHUB_OUTPUT
          echo "run-aks=${RUN_AKS}" >> $GITHUB_OUTPUT
          echo "kaito-version=${KAITO_VERSION}" >> $GITHUB_OUTPUT

  build-test-image:
    name: Build Test Image
    runs-on: ubuntu-latest
    needs: setup
    if: needs.setup.outputs.run-kind == 'true' || needs.setup.outputs.run-aks == 'true'
    permissions:
      contents: read
      packages: write
    outputs:
      image: ${{ steps.image.outputs.image }}
      digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Build binary for testing
        run: make build

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=test-${{ github.run_number }}

      - name: Build and push test image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Set image output
        id: image
        run: echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:test-${{ github.run_number }}" >> $GITHUB_OUTPUT

  e2e-kind:
    name: E2E Kind Tests
    runs-on: ubuntu-latest
    needs: [setup, build-test-image]
    if: needs.setup.outputs.run-kind == 'true'
    strategy:
      matrix:
        kubernetes-version: ["v1.28.0", "v1.29.0"]
        include:
          - kubernetes-version: "v1.28.0"
            kind-image: "kindest/node:v1.28.0"
          - kubernetes-version: "v1.29.0"
            kind-image: "kindest/node:v1.29.0"
    env:
      KAITO_IMAGE_TAG: ${{ needs.setup.outputs.kaito-version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: ${{ matrix.kubernetes-version }}

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: "v3.12.0"

      - name: Set up Kind
        uses: helm/kind-action@v1.8.0
        with:
          install_only: true
          version: v0.20.0

      - name: Verify prerequisites
        run: |
          echo "=== Verifying Prerequisites ==="
          echo "Kind version: $(kind version)"
          echo "Kubectl version: $(kubectl version --client)"
          echo "Helm version: $(helm version)"
          echo "Docker version: $(docker version --format '{{.Client.Version}}')"

      - name: Run Kind e2e tests
        run: |
          echo "Running Kind e2e tests with Kubernetes ${{ matrix.kubernetes-version }}"
          export KIND_IMAGE="${{ matrix.kind-image }}"
          make test-e2e-kind
        timeout-minutes: 30

      - name: Collect test artifacts
        if: always()
        run: |
          mkdir -p artifacts/kind-${{ matrix.kubernetes-version }}

          # Collect Kind cluster logs
          if kind get clusters | grep -q kaito-e2e-kind; then
            kind export logs artifacts/kind-${{ matrix.kubernetes-version }}/cluster-logs || true
          fi

          # Collect kubectl outputs
          kubectl get nodes -o wide > artifacts/kind-${{ matrix.kubernetes-version }}/nodes.txt 2>&1 || true
          kubectl get pods --all-namespaces -o wide > artifacts/kind-${{ matrix.kubernetes-version }}/pods.txt 2>&1 || true
          kubectl get svc --all-namespaces > artifacts/kind-${{ matrix.kubernetes-version }}/services.txt 2>&1 || true

          # Collect KAITO specific resources
          kubectl get workspace --all-namespaces -o yaml > artifacts/kind-${{ matrix.kubernetes-version }}/workspaces.yaml 2>&1 || true
          kubectl get events --all-namespaces --sort-by='.lastTimestamp' > artifacts/kind-${{ matrix.kubernetes-version }}/events.txt 2>&1 || true

      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: kind-test-artifacts-${{ matrix.kubernetes-version }}
          path: artifacts/kind-${{ matrix.kubernetes-version }}/
          retention-days: 7

      - name: Cleanup Kind cluster
        if: always()
        run: |
          if kind get clusters | grep -q kaito-e2e-kind; then
            echo "Cleaning up Kind cluster..."
            kind delete cluster --name kaito-e2e-kind || true
          fi

  e2e-aks:
    name: E2E AKS Tests
    runs-on: ubuntu-latest
    needs: [setup, build-test-image]
    if: needs.setup.outputs.run-aks == 'true'
    environment: azure-testing
    strategy:
      matrix:
        region: ["eastus", "westus2"]
        kubernetes-version: ["1.28", "1.29"]
    env:
      AKS_RESOURCE_GROUP: kubectl-kaito-e2e-${{ github.run_number }}-${{ matrix.region }}
      AKS_CLUSTER_NAME: kaito-e2e-${{ github.run_number }}-${{ matrix.region }}
      AZURE_LOCATION: ${{ matrix.region }}
      KAITO_IMAGE_TAG: ${{ needs.setup.outputs.kaito-version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: "v1.${{ matrix.kubernetes-version }}.0"

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: "v3.12.0"

      - name: Verify Azure CLI and prerequisites
        run: |
          echo "=== Verifying Azure Prerequisites ==="
          az --version
          az account show

          echo "=== Checking GPU Quota ==="
          # Check GPU quota in the region
          az vm list-usage --location ${{ matrix.region }} \
            --query "[?contains(localName, 'Standard NC')]" \
            --output table || true

          echo "=== Tool Versions ==="
          echo "Kubectl version: $(kubectl version --client)"
          echo "Helm version: $(helm version)"

      - name: Run AKS e2e tests
        run: |
          echo "Running AKS e2e tests in ${{ matrix.region }} with Kubernetes ${{ matrix.kubernetes-version }}"
          export KUBERNETES_VERSION="${{ matrix.kubernetes-version }}"
          make test-e2e-aks
        timeout-minutes: 60

      - name: Collect test artifacts
        if: always()
        run: |
          mkdir -p artifacts/aks-${{ matrix.region }}-${{ matrix.kubernetes-version }}

          # Collect cluster information
          if az aks show --resource-group $AKS_RESOURCE_GROUP --name $AKS_CLUSTER_NAME &>/dev/null; then
            az aks show --resource-group $AKS_RESOURCE_GROUP --name $AKS_CLUSTER_NAME > artifacts/aks-${{ matrix.region }}-${{ matrix.kubernetes-version }}/cluster-info.json 2>&1 || true
            
            # Get kubeconfig and collect kubectl outputs
            az aks get-credentials --resource-group $AKS_RESOURCE_GROUP --name $AKS_CLUSTER_NAME --overwrite-existing || true
            
            kubectl get nodes -o wide > artifacts/aks-${{ matrix.region }}-${{ matrix.kubernetes-version }}/nodes.txt 2>&1 || true
            kubectl get pods --all-namespaces -o wide > artifacts/aks-${{ matrix.region }}-${{ matrix.kubernetes-version }}/pods.txt 2>&1 || true
            kubectl get svc --all-namespaces > artifacts/aks-${{ matrix.region }}-${{ matrix.kubernetes-version }}/services.txt 2>&1 || true
            
            # Collect KAITO specific resources
            kubectl get workspace --all-namespaces -o yaml > artifacts/aks-${{ matrix.region }}-${{ matrix.kubernetes-version }}/workspaces.yaml 2>&1 || true
            kubectl get events --all-namespaces --sort-by='.lastTimestamp' > artifacts/aks-${{ matrix.region }}-${{ matrix.kubernetes-version }}/events.txt 2>&1 || true
          fi

      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: aks-test-artifacts-${{ matrix.region }}-${{ matrix.kubernetes-version }}
          path: artifacts/aks-${{ matrix.region }}-${{ matrix.kubernetes-version }}/
          retention-days: 7

      - name: Cleanup AKS resources
        if: always()
        run: |
          echo "Cleaning up AKS resources..."
          # Delete resource group (this removes all resources)
          az group delete --name $AKS_RESOURCE_GROUP --yes --no-wait || true

          # Also clean up any orphaned resources
          echo "Cleanup initiated for resource group: $AKS_RESOURCE_GROUP"

  # Summary job to provide a single status check
  e2e-tests-summary:
    name: E2E Tests Summary
    runs-on: ubuntu-latest
    needs: [setup, e2e-kind, e2e-aks]
    if: always()
    steps:
      - name: Check test results
        run: |
          echo "=== E2E Tests Summary ==="
          echo "Setup: ${{ needs.setup.result }}"
          echo "Kind Tests: ${{ needs.e2e-kind.result }}"
          echo "AKS Tests: ${{ needs.e2e-aks.result }}"

          # Determine overall success
          OVERALL_SUCCESS=true

          # Setup must succeed
          if [[ "${{ needs.setup.result }}" != "success" ]]; then
            echo "❌ Setup failed"
            OVERALL_SUCCESS=false
          fi

          # Kind tests must succeed if they ran
          if [[ "${{ needs.setup.outputs.run-kind }}" == "true" ]]; then
            if [[ "${{ needs.e2e-kind.result }}" == "success" ]]; then
              echo "✅ Kind tests passed"
            else
              echo "❌ Kind tests failed"
              OVERALL_SUCCESS=false
            fi
          else
            echo "⏭️ Kind tests skipped"
          fi

          # AKS tests are optional for PR success (expensive)
          if [[ "${{ needs.setup.outputs.run-aks }}" == "true" ]]; then
            if [[ "${{ needs.e2e-aks.result }}" == "success" ]]; then
              echo "✅ AKS tests passed"
            else
              echo "⚠️ AKS tests failed (not blocking for PRs)"
              # Only fail overall on main branch
              if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
                OVERALL_SUCCESS=false
              fi
            fi
          else
            echo "⏭️ AKS tests skipped"
          fi

          if [[ "$OVERALL_SUCCESS" == "true" ]]; then
            echo "✅ All required E2E tests passed"
            exit 0
          else
            echo "❌ Some E2E tests failed"
            exit 1
          fi
